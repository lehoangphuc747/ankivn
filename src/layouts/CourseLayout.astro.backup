---
import type { CourseGradients } from '../utils/gradients';
import { buildGradientClass, mergeGradients, defaultGradients } from '../utils/gradients';

export interface Props {
  course: {
    id: string;
    title: string;
    level: string;
    description: string;
    duration: string;
    students: number;
    rating: number;
    modules: Array<{
      id: string;
      title: string;
      duration: string;
      description: string;
      lessons: Array<{
        title: string;
        slug: string;
        duration: string;
      }>;
    }>;
  };
  theme: {
    emoji: string;
    colors: {
      primary: string;
      secondary: string;
      badge: string;
      hover: {
        primary: string;
        secondary: string;
      };
    };
  };
  mainContent?: any; // This prop is no longer used, but kept for safety. We will use slot instead.
  gradients?: Partial<CourseGradients>;
  prerequisiteSection?: {
    show: boolean;
    content?: any;
  };
  nextCourseSection?: {
    show: boolean;
    content?: any;
  };
}

const { course, theme, gradients, prerequisiteSection, nextCourseSection, mainContent } = Astro.props;
const courseGradients = mergeGradients(gradients, defaultGradients);
const heroGradientClass = buildGradientClass(courseGradients.hero!);
const moduleHeaderGradientClass = buildGradientClass(courseGradients.moduleHeader!);

import BaseLayout from './BaseLayout.astro';
---

<BaseLayout title={`${course.title} - AnkiVN`} description={course.description}>
  <!-- Hero Section -->
  <section class={`${heroGradientClass} relative overflow-hidden`}>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 sm:py-32">
      <div class="text-center">
        <div class="inline-block p-4 bg-white/30 backdrop-blur-sm rounded-3xl shadow-lg mb-6">
          <span class="text-6xl">{theme.emoji}</span>
        </div>
        <h1 class="text-4xl sm:text-5xl md:text-6xl font-black text-gray-900 tracking-tight leading-tight">
          {course.title}
        </h1>
        <p class="mt-6 max-w-3xl mx-auto text-lg sm:text-xl text-gray-700 leading-relaxed text-center">
          {course.description}
        </p>
        <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-4">
          <a href="#modules" class={`btn-ripple inline-flex items-center justify-center px-8 py-4 border border-transparent text-base font-bold rounded-xl text-white bg-${theme.colors.primary}-600 hover:bg-${theme.colors.hover.primary}-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1`}>
            Bắt đầu học ngay
          </a>
          <a href="/guides" class="inline-flex items-center justify-center px-8 py-4 border-2 border-transparent text-base font-bold rounded-xl text-gray-800 bg-white/50 backdrop-blur-sm hover:bg-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1">
            Tất cả khóa học
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Course Stats Bar -->
  <section class="bg-white/60 backdrop-blur-md border-y border-gray-200/80 sticky top-0 z-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex flex-wrap justify-center md:justify-between items-center gap-x-6 gap-y-3 py-4 text-sm font-medium">
        <div class="flex items-center gap-2 text-gray-700">
          <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path></svg>
          <span>{course.modules?.length || 0} Modules</span>
        </div>
        <div class="flex items-center gap-2 text-gray-700">
          <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v11.494m-5.747-5.747h11.494"></path></svg>
          <span>{course.modules?.reduce((acc, module) => acc + (module.lessons?.length || 0), 0) || 0} Bài học</span>
        </div>
        <div class="flex items-center gap-2 text-gray-700">
          <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          <span>{course.duration}</span>
        </div>
        <div class="flex items-center gap-2 text-gray-700">
          <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
          <span>{course.students.toLocaleString()} Học viên</span>
        </div>
        <div class="flex items-center gap-2 text-yellow-600">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>
          <span>{course.rating} Đánh giá</span>
        </div>
      </div>
    </div>
  </section>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
      <!-- Main Content Column -->
      <div class="lg:col-span-2">
        <!-- Main Content from Slot -->
        <div class="prose prose-lg max-w-none bg-white rounded-2xl shadow-lg border border-gray-200/80 p-8 sm:p-12 mb-12">
          <slot />
        </div>

        <!-- Course Modules -->
        <section id="modules">
          <div class="mb-12">
            <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-2">
              Nội dung khóa học
            </h2>
            <p class="text-lg text-gray-600">
              Khám phá chi tiết các bài học trong từng module.
            </p>
          </div>

          <div class="space-y-6">
            {course.modules.map((module, index) => (
              <div class="bg-white rounded-2xl shadow-lg border border-gray-200/80 overflow-hidden transition-all duration-300 hover:shadow-xl hover:border-gray-300/80">
                <!-- Module Header -->
                <button class="module-toggle w-full p-6 text-left" data-module-id={module.id}>
                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-4">
                      <span class={`flex-shrink-0 w-12 h-12 ${moduleHeaderGradientClass} text-white rounded-xl flex items-center justify-center text-xl font-bold shadow-md`}>
                        {index + 1}
                      </span>
                      <div>
                        <h3 class="text-lg sm:text-xl font-bold text-gray-900">{module.title}</h3>
                        <p class="text-sm text-gray-500 mt-1">{module.lessons.length} bài học • {module.duration}</p>
                      </div>
                    </div>
                    <svg id={`arrow-${module.id}`} class="w-6 h-6 text-gray-400 transform transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </button>
                
                <!-- Module Content -->
                <div id={`content-${module.id}`} class="module-content bg-gray-50/70">
                  <div class="p-6 border-t border-gray-200/80">
                    <p class="text-gray-600 leading-relaxed">{module.description}</p>
                  </div>
                  <div class="divide-y divide-gray-200/80">
                    {module.lessons.map((lesson, lessonIndex) => (
                      <a href={`/guides/${course.id}/${lesson.slug}`} class="block p-5 hover:bg-white transition-colors group">
                        <div class="flex items-center gap-4">
                          <span class={`flex-shrink-0 w-8 h-8 bg-${theme.colors.primary}-100 text-${theme.colors.primary}-700 rounded-full flex items-center justify-center text-sm font-bold group-hover:bg-${theme.colors.primary}-200 transition-colors`}>
                            {lessonIndex + 1}
                          </span>
                          <div class="flex-1">
                            <h4 class={`font-semibold text-gray-800 group-hover:text-${theme.colors.primary}-600 transition-colors`}>{lesson.title}</h4>
                          </div>
                          <svg class="w-5 h-5 text-gray-400 group-hover:text-${theme.colors.primary}-600 transition-colors opacity-50 group-hover:opacity-100" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>

      <!-- Sidebar Column -->
      <div class="lg:col-span-1">
        <div class="sticky top-24 space-y-8">
          <!-- Prerequisites Section -->
          {prerequisiteSection?.show && (
            <div class={`p-6 rounded-2xl ${course.level === 'Cơ bản' ? 'bg-green-50/80 border border-green-200/80' : 'bg-amber-50/80 border border-amber-200/80'}`}>
              <Fragment set:html={prerequisiteSection.content} />
            </div>
          )}

          <!-- Next Course Section -->
          {nextCourseSection?.show && (
            <div class="p-6 rounded-2xl bg-gray-100/80 border border-gray-200/80">
              <Fragment set:html={nextCourseSection.content} />
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  function toggleModule(moduleId: string) {
    const content = document.getElementById(`content-${moduleId}`) as HTMLElement;
    const arrow = document.getElementById(`arrow-${moduleId}`) as HTMLElement;

    if (content && arrow) {
      const currentMaxHeight = content.style.maxHeight;

      // Toggle between expand and collapse
      if (!currentMaxHeight || currentMaxHeight === '0px') {
        content.style.maxHeight = content.scrollHeight + 'px';
        arrow.style.transform = 'rotate(180deg)';
      } else {
        content.style.maxHeight = '0px';
        arrow.style.transform = 'rotate(0deg)';
      }
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 DOMContentLoaded - initializing modules');
    const moduleContents = document.querySelectorAll('.module-content');
    console.log('📋 Found module contents:', moduleContents.length);

    moduleContents.forEach((content, index) => {
      const contentElement = content as HTMLElement;
      const moduleId = content.id.replace('content-', '');
      const arrow = document.getElementById(`arrow-${moduleId}`) as HTMLElement;
      console.log(`🔄 Processing module ${index + 1}:`, moduleId, 'Content:', contentElement, 'Arrow:', arrow);

      if (index === 0) {
        contentElement.style.maxHeight = contentElement.scrollHeight + 'px';
        if (arrow) arrow.style.transform = 'rotate(180deg)';
        console.log('✅ Expanded first module:', moduleId);
      } else {
        contentElement.style.maxHeight = '0px';
        if (arrow) arrow.style.transform = 'rotate(0deg)';
        console.log('❌ Collapsed module:', moduleId);
      }
    });

    const toggleButtons = document.querySelectorAll('.module-toggle');
    console.log('🔘 Found toggle buttons:', toggleButtons.length);
    toggleButtons.forEach((button, index) => {
      console.log(`🔗 Attaching listener to button ${index + 1}:`, button);
      button.addEventListener('click', function(this: HTMLElement, event) {
        event.preventDefault();
        const moduleId = this.getAttribute('data-module-id');
        console.log('🖱️ Button clicked, moduleId:', moduleId, 'Button element:', this);
        if (moduleId) {
          toggleModule(moduleId);
        } else {
          console.log('❌ No moduleId found on button');
        }
      });
    });
  });
</script>

<style>
  .module-content {
    overflow: hidden;
    transition: max-height 0.4s ease-in-out;
  }
  .prose {
    max-width: none;
  }
  .prose h2 {
    font-size: 1.5em;
    margin-bottom: 1em;
    padding-bottom: 0.5em;
    border-bottom: 1px solid #e5e7eb;
  }
  .prose ul {
    list-style-type: '✓ ';
    padding-left: 1.5em;
  }
  .prose li {
    padding-left: 0.5em;
    margin-bottom: 0.5em;
  }
</style>
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">
            Nội dung khóa học
          </h2>
          <p class="text-gray-600">
            {course.modules?.length || 0} modules • {course.modules?.reduce((acc, module) => acc + (module.lessons?.length || 0), 0) || 0} bài học • {course.duration} tổng thời lượng
          </p>
        </div>

        <div class="max-w-4xl mx-auto">
          <div class="space-y-6">
            {course.modules.map((module, index) => (
              <div class="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
                <!-- Module Header - Collapsible -->
                <button 
                  class={`module-toggle w-full ${moduleHeaderGradientClass} text-white p-6 text-left hover:opacity-95 transition-all duration-300`}
                  data-module-id={module.id}
                >
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <span class="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center text-lg font-bold mr-4">
                        {index + 1}
                      </span>
                      <div>
                        <h3 class="text-xl font-bold !text-white">{module.title}</h3>
                        <p class="text-white/90 mt-1">{module.duration} • {module.lessons.length} bài học</p>
                      </div>
                    </div>
                    <!-- Collapse Icon -->
                    <svg 
                      id={`arrow-${module.id}`}
                      class="w-6 h-6 transform transition-transform duration-300" 
                      fill="none"
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </button>
                
                <!-- Module Content - Collapsible -->
                <div id={`content-${module.id}`} class="module-content bg-gray-50/50">
                  <div class="p-6 border-b border-gray-200">
                    <p class="text-gray-600 leading-relaxed mb-4">
                      {module.description}
                    </p>
                  </div>
                  
                  <!-- Lessons List -->
                  <div class="divide-y divide-gray-100">
                    {module.lessons.map((lesson, lessonIndex) => (
                      <a 
                        href={`/guides/${course.id}/${lesson.slug}`}
                        class="block p-5 hover:bg-white transition-colors group cursor-pointer"
                      >
                        <div class="flex items-center">
                          <span class={`w-8 h-8 bg-${theme.colors.primary}-100 text-${theme.colors.primary}-600 rounded-full flex items-center justify-center text-sm font-bold mr-4 group-hover:bg-${theme.colors.primary}-200 transition-colors`}>
                            {lessonIndex + 1}
                          </span>
                          <div class="flex-1 flex items-center">
                            <h4 class={`font-semibold text-gray-800 group-hover:text-${theme.colors.primary}-600 transition-colors`}>{lesson.title}</h4>
                          </div>
                          <svg class="w-5 h-5 text-gray-400 group-hover:text-${theme.colors.primary}-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Next Course Section (Optional) -->
    {nextCourseSection?.show && (
      <section class="py-16 bg-gray-50">
        <div class="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
          <Fragment set:html={nextCourseSection.content} />
        </div>
      </section>
    )}
  </main>
</BaseLayout>

<script>
  function toggleModule(moduleId: string) {
    const content = document.getElementById(`content-${moduleId}`) as HTMLElement;
    const arrow = document.getElementById(`arrow-${moduleId}`) as HTMLElement;

    if (content && arrow) {
      if (content.style.maxHeight && content.style.maxHeight !== '0px') {
        content.style.maxHeight = '0px';
        arrow.style.transform = 'rotate(0deg)';
      } else {
        content.style.maxHeight = content.scrollHeight + 'px';
        arrow.style.transform = 'rotate(180deg)';
      }
    }
  }

  // Initialize modules and add event listeners
  document.addEventListener('DOMContentLoaded', function() {
    const moduleContents = document.querySelectorAll('.module-content');

    // Collapse all modules except the first one
    moduleContents.forEach((content, index) => {
      const contentElement = content as HTMLElement;
      const moduleId = content.id.replace('content-', '');
      const arrow = document.getElementById(`arrow-${moduleId}`) as HTMLElement;

      if (index === 0) {
        contentElement.style.maxHeight = contentElement.scrollHeight + 'px';
        if (arrow) arrow.style.transform = 'rotate(180deg)';
      } else {
        contentElement.style.maxHeight = '0px';
        if (arrow) arrow.style.transform = 'rotate(0deg)';
      }
    });

    // Add click event listeners to module toggle buttons
    const toggleButtons = document.querySelectorAll('.module-toggle');
    toggleButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        const target = event.currentTarget as HTMLElement;
        const moduleId = target.getAttribute('data-module-id');
        if (moduleId) {
          toggleModule(moduleId);
        }
      });
    });
  });
</script>

<style>
  .module-content {
    overflow: hidden;
    transition: max-height 0.3s ease-in-out;
  }
  
  /* Custom gradient for co-ban page (green) */
  .custom-gradient.bg-gradient-to-br {
    background: linear-gradient(to bottom right, #00f260, #0575e6);
  }
  
  .custom-gradient.bg-gradient-to-r {
    background: linear-gradient(to right, #00f260, #0575e6);
  }
  
  /* Custom gradient for nang-cao page (blue-purple) */
  .custom-gradient-advanced.bg-gradient-to-br {
    background: linear-gradient(to bottom right, #667eea, #764ba2);
  }
  
  .custom-gradient-advanced.bg-gradient-to-r {
    background: linear-gradient(to right, #667eea, #764ba2);
  }
</style>
