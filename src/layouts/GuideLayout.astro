---
import BaseLayout from '@/layouts/BaseLayout.astro';
const { 
  title, 
  date, 
  author, 
  tags, 
  readingTime, 
  cover,
  modules,
  currentModule,
  currentLesson,
  difficulty,
  duration
} = Astro.props as { 
  title: string; 
  date?: string; 
  author?: string;
  tags?: string[];
  readingTime?: string;
  cover?: string;
  modules?: Array<{
    title: string;
    lessons: Array<{
      title: string;
      slug: string;
      duration?: string;
      completed?: boolean;
    }>;
  }>;
  currentModule?: number;
  currentLesson?: number;
  difficulty?: 'C∆° b·∫£n' | 'Trung b√¨nh' | 'N√¢ng cao';
  duration?: string;
};

// Safe defaults
const safeModules = modules || [];
const safeTags = tags || [];
const hasModules = Array.isArray(safeModules) && safeModules.length > 0;

// Helper functions for safe access
const getTotalLessons = () => safeModules.reduce((acc, module) => acc + (module.lessons?.length || 0), 0);
const getCompletedLessons = () => safeModules.reduce((acc, module) => acc + (module.lessons?.filter(lesson => lesson.completed)?.length || 0), 0);
const getProgressPercentage = () => {
  const total = getTotalLessons();
  return total > 0 ? (getCompletedLessons() / total) * 100 : 0;
};

const getDifficultyColor = (level?: string) => {
  switch(level) {
    case 'C∆° b·∫£n': return 'bg-green-100 text-green-800';
    case 'Trung b√¨nh': return 'bg-yellow-100 text-yellow-800';
    case 'N√¢ng cao': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};
---
<BaseLayout title={title}>
  <div class="min-h-screen">
    <!-- Course Header -->
    <div class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="flex flex-col lg:flex-row gap-8">
          <!-- Course Info -->
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-4">
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                üìö Kh√≥a h·ªçc
              </span>
              {difficulty && (
                <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getDifficultyColor(difficulty)}`}>
                  {difficulty}
                </span>
              )}
            </div>

            <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
              {title}
            </h1>

            <div class="flex flex-wrap items-center gap-6 text-sm text-gray-600 mb-4">
              {author && (
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>Gi·∫£ng vi√™n: {author}</span>
                </div>
              )}
              
              {duration && (
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>Th·ªùi l∆∞·ª£ng: {duration}</span>
                </div>
              )}

              {date && (
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span>C·∫≠p nh·∫≠t: {new Date(date).toLocaleDateString('vi-VN')}</span>
                </div>
              )}
            </div>

            {safeTags && Array.isArray(safeTags) && safeTags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {safeTags.map(tag => (
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800">
                    #{tag}
                  </span>
                ))}
              </div>
            )}
          </div>

          <!-- Course Cover -->
          {cover && (
            <div class="lg:w-80">
              <img 
                src={cover} 
                alt={title}
                class="w-full rounded-lg shadow-lg"
                loading="eager"
              />
            </div>
          )}
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        
        <!-- Course Sidebar -->
        {hasModules && (
          <div class="lg:col-span-1">
            <div class="bg-white rounded-xl border border-gray-200 shadow-sm sticky top-8">
              <!-- Progress Overview -->
              <div class="p-6 border-b border-gray-100">
                <div class="flex items-center justify-between mb-3">
                  <h3 class="text-lg font-semibold text-gray-900">
                    üìã N·ªôi dung kh√≥a h·ªçc
                  </h3>
                  <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium">
                    {getCompletedLessons()}/{getTotalLessons()}
                  </span>
                </div>
                
                <!-- Overall Progress Bar -->
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    class="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300" 
                    style={`width: ${getProgressPercentage()}%`}
                  ></div>
                </div>
              </div>
              
              <!-- Modules List -->
              <div class="max-h-[calc(100vh-12rem)] overflow-y-auto">
                <div class="space-y-2 p-4">
                  {safeModules.map((module, moduleIndex) => (
                    <div class="border border-gray-100 rounded-lg overflow-hidden">
                      <!-- Module Header -->
                      <button 
                        class="module-toggle w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 text-left transition-colors"
                        data-module={moduleIndex}
                      >
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-3">
                            <span class="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold">
                              {moduleIndex + 1}
                            </span>
                            <div>
                              <h4 class="font-medium text-gray-900 text-sm">
                                {module.title}
                              </h4>
                              <div class="text-xs text-gray-500">
                                {(module.lessons?.filter(lesson => lesson.completed)?.length || 0)}/{(module.lessons?.length || 0)} b√†i ho√†n th√†nh
                              </div>
                            </div>
                          </div>
                          <svg class="module-chevron w-5 h-5 text-gray-400 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                          </svg>
                        </div>
                      </button>
                      
                      <!-- Module Lessons -->
                      <div class="module-content bg-white" data-module={moduleIndex}>
                        <ul class="py-2">
                          {module.lessons.map((lesson, lessonIndex) => (
                            <li>
                              <a 
                                href={`/guides/${lesson.slug}`}
                                class={`lesson-link block px-4 py-3 text-sm transition-all border-l-3 ${
                                  currentModule === moduleIndex && currentLesson === lessonIndex
                                    ? 'bg-blue-50 text-blue-800 font-medium border-blue-500'
                                    : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900 border-transparent hover:border-gray-200'
                                }`}
                              >
                                <div class="flex items-center justify-between">
                                  <div class="flex items-center gap-3">
                                    <div class={`flex-shrink-0 w-5 h-5 rounded-full flex items-center justify-center text-xs ${
                                      lesson.completed 
                                        ? 'bg-green-100 text-green-600' 
                                        : currentModule === moduleIndex && currentLesson === lessonIndex
                                        ? 'bg-blue-100 text-blue-600'
                                        : 'bg-gray-100 text-gray-400'
                                    }`}>
                                      {lesson.completed ? (
                                        <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                        </svg>
                                      ) : (
                                        <span>{lessonIndex + 1}</span>
                                      )}
                                    </div>
                                    <div class="flex-1 min-w-0">
                                      <div class="truncate">{lesson.title}</div>
                                      {lesson.duration && (
                                        <div class="text-xs text-gray-400 mt-0.5">
                                          ‚è±Ô∏è {lesson.duration}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                  
                                  {currentModule === moduleIndex && currentLesson === lessonIndex && (
                                    <div class="flex-shrink-0">
                                      <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                                    </div>
                                  )}
                                </div>
                              </a>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <!-- Course Actions -->
              <div class="p-4 border-t border-gray-100 bg-gray-50">
                <div class="space-y-2">
                  <button class="w-full px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors text-sm">
                    üíæ L∆∞u ti·∫øn ƒë·ªô
                  </button>
                  <button class="w-full px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg transition-colors text-sm">
                    üì§ Chia s·∫ª kh√≥a h·ªçc
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        <!-- Enhanced Main Content -->
        <div class={`${hasModules ? 'lg:col-span-3' : 'lg:col-span-4'}`}>
          <!-- Lesson Header Navigation -->
          {currentModule !== undefined && currentLesson !== undefined && modules && (
            <div class="bg-white rounded-xl border border-gray-200 shadow-sm mb-6 overflow-hidden">
              <div class="bg-gradient-to-r from-blue-500 to-purple-600 px-6 py-4">
                <div class="flex items-center justify-between text-white">
                  <div>
                    <div class="text-sm opacity-90">
                      Module {currentModule + 1} c·ªßa {modules.length} ‚Ä¢ B√†i {currentLesson + 1} c·ªßa {modules[currentModule].lessons.length}
                    </div>
                    <h2 class="text-xl font-semibold mt-1">
                      {modules[currentModule]?.lessons[currentLesson]?.title}
                    </h2>
                  </div>
                  
                  <!-- Quick Actions -->
                  <div class="flex items-center gap-2">
                    <button id="bookmark-btn" class="p-2 rounded-lg bg-white/20 hover:bg-white/30 transition-colors">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                      </svg>
                    </button>
                    <button id="settings-btn" class="p-2 rounded-lg bg-white/20 hover:bg-white/30 transition-colors">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </button>
                  </div>
                </div>
                
                <!-- Progress Bar -->
                <div class="mt-4">
                  <div class="flex items-center justify-between text-sm opacity-90 mb-2">
                    <span>Ti·∫øn ƒë·ªô kh√≥a h·ªçc</span>
                    <span>{Math.round(((currentModule * modules[currentModule].lessons.length + currentLesson + 1) / modules.reduce((acc, module) => acc + module.lessons.length, 0)) * 100)}%</span>
                  </div>
                  <div class="w-full bg-white/20 rounded-full h-2">
                    <div 
                      class="bg-white h-2 rounded-full transition-all duration-500" 
                      style={`width: ${((currentModule * modules[currentModule].lessons.length + currentLesson + 1) / modules.reduce((acc, module) => acc + module.lessons.length, 0)) * 100}%`}
                    ></div>
                  </div>
                </div>
              </div>
              
              <!-- Lesson Navigation -->
              <div class="px-6 py-4 bg-gray-50 border-t">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    {currentLesson > 0 || currentModule > 0 ? (
                      <a 
                        href={`/guides/${
                          currentLesson > 0 
                            ? modules[currentModule].lessons[currentLesson - 1].slug
                            : currentModule > 0 
                              ? modules[currentModule - 1].lessons[modules[currentModule - 1].lessons.length - 1].slug
                              : '#'
                        }`}
                        class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                      >
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                        B√†i tr∆∞·ªõc
                      </a>
                    ) : (
                      <span class="inline-flex items-center px-4 py-2 border border-gray-200 rounded-lg text-sm text-gray-400 bg-gray-100">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                        B√†i tr∆∞·ªõc
                      </span>
                    )}
                    
                    <a 
                      href="/guides" 
                      class="inline-flex items-center px-4 py-2 text-sm text-gray-600 hover:text-gray-900 transition-colors"
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5v4" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 5v4" />
                      </svg>
                      T·∫•t c·∫£ kh√≥a h·ªçc
                    </a>
                  </div>
                  
                  <div class="flex items-center gap-4">
                    <!-- Lesson Duration -->
                    {modules[currentModule]?.lessons[currentLesson]?.duration && (
                      <div class="flex items-center text-sm text-gray-600">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        {modules[currentModule].lessons[currentLesson].duration}
                      </div>
                    )}
                    
                    {currentLesson < modules[currentModule].lessons.length - 1 || currentModule < modules.length - 1 ? (
                      <a 
                        href={`/guides/${
                          currentLesson < modules[currentModule].lessons.length - 1
                            ? modules[currentModule].lessons[currentLesson + 1].slug
                            : currentModule < modules.length - 1
                              ? modules[currentModule + 1].lessons[0].slug
                              : '#'
                        }`}
                        class="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors text-sm"
                      >
                        B√†i ti·∫øp theo
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </a>
                    ) : (
                      <a 
                        href="/guides" 
                        class="inline-flex items-center px-4 py-2 bg-green-500 hover:bg-green-600 text-white font-medium rounded-lg transition-colors text-sm"
                      >
                        üéâ Ho√†n th√†nh
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </a>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          <!-- Main Content Area -->
          <div class="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            <!-- Content Body -->
            <div class="lesson-content p-8">
              <slot />
            </div>

            <!-- Enhanced Footer Actions -->
            <div class="border-t border-gray-200 bg-gray-50 px-8 py-6">
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Lesson Rating -->
                <div class="text-center">
                  <h4 class="text-sm font-medium text-gray-900 mb-2">ƒê√°nh gi√° b√†i h·ªçc</h4>
                  <div class="flex items-center justify-center gap-1">
                    {[1, 2, 3, 4, 5].map(star => (
                      <button class="star-rating w-6 h-6 text-gray-300 hover:text-yellow-400 transition-colors" data-rating={star}>
                        <svg fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                      </button>
                    ))}
                  </div>
                </div>
                
                <!-- Study Time Tracker -->
                <div class="text-center">
                  <h4 class="text-sm font-medium text-gray-900 mb-2">Th·ªùi gian h·ªçc</h4>
                  <div id="study-timer" class="text-lg font-bold text-blue-600">00:00</div>
                </div>
                
                <!-- Quick Actions -->
                <div class="text-center">
                  <h4 class="text-sm font-medium text-gray-900 mb-2">H√†nh ƒë·ªông</h4>
                  <div class="flex items-center justify-center gap-2">
                    <button id="mark-complete" class="px-3 py-1 bg-green-100 text-green-700 rounded-lg text-sm hover:bg-green-200 transition-colors">
                      ‚úì Ho√†n th√†nh
                    </button>
                    <button id="add-note" class="px-3 py-1 bg-blue-100 text-blue-700 rounded-lg text-sm hover:bg-blue-200 transition-colors">
                      üìù Ghi ch√∫
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Social Actions -->
              <div class="mt-6 pt-6 border-t border-gray-200">
                <div class="flex items-center justify-between">
                  <div class="text-sm text-gray-600">
                    H·ªØu √≠ch? Chia s·∫ª v·ªõi b·∫°n b√®:
                  </div>
                  <div class="flex items-center gap-2">
                    <button class="share-btn p-2 text-gray-400 hover:text-blue-500 transition-colors" data-platform="facebook">
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M20 10C20 4.477 15.523 0 10 0S0 4.477 0 10c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V10h2.54V7.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V10h2.773l-.443 2.89h-2.33v6.988C16.343 19.128 20 14.991 20 10z" clip-rule="evenodd" />
                      </svg>
                    </button>
                    <button class="share-btn p-2 text-gray-400 hover:text-blue-400 transition-colors" data-platform="twitter">
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M6.29 18.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0020 3.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.073 4.073 0 01.8 7.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 010 16.407a11.616 11.616 0 006.29 1.84" />
                      </svg>
                    </button>
                    <button class="share-btn p-2 text-gray-400 hover:text-green-500 transition-colors" data-platform="copy">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div> 
                    (Module {currentModule + 1} / {modules.length})
                  </div>
                )}

                {/* Back to courses */}
                <a 
                  href="/guides" 
                  class="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12" />
                  </svg>
                  Quay l·∫°i danh s√°ch kh√≥a h·ªçc
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Course-specific styling */
  .lesson-content {
    color: #374151;
    line-height: 1.8;
  }

  .lesson-content h1,
  .lesson-content h2,
  .lesson-content h3,
  .lesson-content h4,
  .lesson-content h5,
  .lesson-content h6 {
    color: #111827;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.4;
  }

  .lesson-content h1 {
    font-size: 2rem;
    border-bottom: 2px solid #3b82f6;
    padding-bottom: 0.5rem;
  }

  .lesson-content h2 {
    font-size: 1.5rem;
    color: #3b82f6;
  }

  .lesson-content h3 {
    font-size: 1.25rem;
    color: #1d4ed8;
  }

  .lesson-content p {
    margin: 1.25rem 0;
  }

  .lesson-content a {
    color: #3b82f6;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: all 0.2s;
  }

  .lesson-content a:hover {
    color: #1d4ed8;
    border-bottom-color: #3b82f6;
  }

  .lesson-content ul,
  .lesson-content ol {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
  }

  .lesson-content li {
    margin: 0.5rem 0;
  }

  .lesson-content blockquote {
    margin: 2rem 0;
    padding: 1rem 1.5rem;
    background: #eff6ff;
    border-left: 4px solid #3b82f6;
    border-radius: 0 8px 8px 0;
    font-style: italic;
    color: #1e40af;
  }

  .lesson-content code {
    background: #f1f5f9;
    color: #e11d48;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.9em;
    font-weight: 500;
  }

  .lesson-content pre {
    background: #0f172a;
    color: #e2e8f0;
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 2rem 0;
  }

  .lesson-content pre code {
    background: transparent;
    color: inherit;
    padding: 0;
  }

  .lesson-content table {
    width: 100%;
    margin: 2rem 0;
    border-collapse: collapse;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .lesson-content th {
    background: #3b82f6;
    color: white;
    padding: 0.75rem;
    text-align: left;
    font-weight: 600;
  }

  .lesson-content td {
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .lesson-content tr:nth-child(even) {
    background: #f9fafb;
  }

  .lesson-content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    margin: 2rem 0;
  }

  .lesson-content hr {
    margin: 3rem 0;
    border: none;
    height: 2px;
    background: linear-gradient(to right, transparent, #3b82f6, transparent);
  }

  /* Course-specific elements */
  .lesson-content .tip {
    background: #f0f9ff;
    border: 1px solid #bae6fd;
    border-radius: 8px;
    padding: 1rem 1.5rem;
    margin: 2rem 0;
    position: relative;
  }

  .lesson-content .tip::before {
    content: "üí°";
    position: absolute;
    top: 1rem;
    left: 1rem;
  }

  .lesson-content .tip-content {
    margin-left: 2rem;
  }

  .lesson-content .warning {
    background: #fef3cd;
    border: 1px solid #fde68a;
    border-radius: 8px;
    padding: 1rem 1.5rem;
    margin: 2rem 0;
    position: relative;
  }

  .lesson-content .warning::before {
    content: "‚ö†Ô∏è";
    position: absolute;
    top: 1rem;
    left: 1rem;
  }

  .lesson-content .warning-content {
    margin-left: 2rem;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .lesson-content h1 {
      font-size: 1.75rem;
    }

    .lesson-content h2 {
      font-size: 1.375rem;
    }

    .lesson-content h3 {
      font-size: 1.125rem;
    }
  }

  @media (max-width: 768px) {
    .lesson-content {
      font-size: 0.95rem;
    }
  }
</style>

<script>
  // Enhanced Course Navigation and Features
  document.addEventListener('DOMContentLoaded', function() {
    // Module toggle functionality
    const moduleToggles = document.querySelectorAll('.module-toggle');
    const moduleContents = document.querySelectorAll('.module-content');
    
    // Study timer
    let studyStartTime = Date.now();
    let timerInterval;
    
    // Initialize
    initializeModuleNavigation();
    initializeStudyTimer();
    initializeInteractiveFeatures();
    initializeProgressTracking();
    
    function initializeModuleNavigation() {
      // Set initial state - expand current module
      moduleContents.forEach((content, index) => {
        const moduleIndex = parseInt(content.dataset.module);
        const currentModuleIndex = parseInt(document.querySelector('[data-current-module]')?.dataset.currentModule) || 0;
        
        if (moduleIndex === currentModuleIndex) {
          content.style.display = 'block';
          const toggle = document.querySelector(`[data-module="${moduleIndex}"]`);
          const chevron = toggle?.querySelector('.module-chevron');
          if (chevron) {
            chevron.style.transform = 'rotate(180deg)';
          }
        } else {
          content.style.display = 'none';
        }
      });
      
      // Add click handlers
      moduleToggles.forEach(toggle => {
        toggle.addEventListener('click', function(e) {
          e.preventDefault();
          const moduleIndex = this.dataset.module;
          const content = document.querySelector(`.module-content[data-module="${moduleIndex}"]`);
          const chevron = this.querySelector('.module-chevron');
          
          if (content.style.display === 'none' || !content.style.display) {
            content.style.display = 'block';
            chevron.style.transform = 'rotate(180deg)';
            
            // Smooth scroll to content
            content.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          } else {
            content.style.display = 'none';
            chevron.style.transform = 'rotate(0deg)';
          }
        });
      });
    }
    
    function initializeStudyTimer() {
      const timerElement = document.getElementById('study-timer');
      if (!timerElement) return;
      
      timerInterval = setInterval(() => {
        const elapsed = Date.now() - studyStartTime;
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      }, 1000);
    }
    
    function initializeInteractiveFeatures() {
      // Star rating system
      const starButtons = document.querySelectorAll('.star-rating');
      starButtons.forEach(star => {
        star.addEventListener('click', function() {
          const rating = parseInt(this.dataset.rating);
          
          // Update star appearance
          starButtons.forEach((s, index) => {
            if (index < rating) {
              s.classList.remove('text-gray-300');
              s.classList.add('text-yellow-400');
            } else {
              s.classList.remove('text-yellow-400');
              s.classList.add('text-gray-300');
            }
          });
          
          // Save rating (would typically send to server)
          console.log(`Lesson rated: ${rating} stars`);
          showNotification(`C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° ${rating} ‚≠ê!`, 'success');
        });
      });
      
      // Mark complete functionality
      const markCompleteBtn = document.getElementById('mark-complete');
      markCompleteBtn?.addEventListener('click', function() {
        this.textContent = '‚úÖ ƒê√£ ho√†n th√†nh';
        this.classList.remove('bg-green-100', 'text-green-700', 'hover:bg-green-200');
        this.classList.add('bg-green-500', 'text-white');
        this.disabled = true;
        
        // Update sidebar progress
        updateLessonProgress();
        showNotification('ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc!', 'success');
      });
      
      // Add note functionality
      const addNoteBtn = document.getElementById('add-note');
      addNoteBtn?.addEventListener('click', function() {
        const note = prompt('Th√™m ghi ch√∫ cho b√†i h·ªçc n√†y:');
        if (note) {
          showNotification('ƒê√£ l∆∞u ghi ch√∫!', 'success');
          // Would typically save to localStorage or server
          console.log('Note saved:', note);
        }
      });
      
      // Share functionality
      const shareButtons = document.querySelectorAll('.share-btn');
      shareButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          const platform = this.dataset.platform;
          const url = window.location.href;
          const title = document.title;
          
          switch(platform) {
            case 'facebook':
              window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
              break;
            case 'twitter':
              window.open(`https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`, '_blank');
              break;
            case 'copy':
              navigator.clipboard.writeText(url).then(() => {
                showNotification('ƒê√£ sao ch√©p link!', 'success');
              });
              break;
          }
        });
      });
      
      // Bookmark functionality
      const bookmarkBtn = document.getElementById('bookmark-btn');
      bookmarkBtn?.addEventListener('click', function() {
        this.classList.toggle('text-white');
        this.classList.toggle('text-yellow-300');
        
        const isBookmarked = this.classList.contains('text-yellow-300');
        showNotification(
          isBookmarked ? 'ƒê√£ th√™m v√†o bookmark!' : 'ƒê√£ b·ªè bookmark!', 
          'success'
        );
      });
    }
    
    function updateLessonProgress() {
      // Update progress bar
      const progressBars = document.querySelectorAll('[style*="width:"]');
      progressBars.forEach(bar => {
        const currentWidth = parseFloat(bar.style.width);
        if (currentWidth < 100) {
          bar.style.width = Math.min(100, currentWidth + 10) + '%';
        }
      });
      
      // Update lesson status in sidebar
      const currentLessonLink = document.querySelector('.lesson-link.bg-blue-50');
      if (currentLessonLink) {
        const statusIndicator = currentLessonLink.querySelector('.w-5.h-5');
        if (statusIndicator) {
          statusIndicator.innerHTML = `
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
          `;
          statusIndicator.className = 'flex-shrink-0 w-5 h-5 rounded-full flex items-center justify-center text-xs bg-green-100 text-green-600';
        }
      }
    }
    
    function initializeProgressTracking() {
      // Track reading progress
      let maxScroll = 0;
      
      window.addEventListener('scroll', () => {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        maxScroll = Math.max(maxScroll, scrollPercent);
        
        // Update progress indicator if needed
        if (maxScroll > 80 && !document.getElementById('mark-complete').disabled) {
          const markCompleteBtn = document.getElementById('mark-complete');
          markCompleteBtn.style.animation = 'pulse 2s infinite';
        }
      });
      
      // Track time spent on lesson
      let focusTime = 0;
      let lastFocusTime = Date.now();
      
      window.addEventListener('focus', () => {
        lastFocusTime = Date.now();
      });
      
      window.addEventListener('blur', () => {
        focusTime += Date.now() - lastFocusTime;
      });
      
      // Save progress before leaving
      window.addEventListener('beforeunload', () => {
        const totalTime = Date.now() - studyStartTime;
        console.log(`Study session: ${Math.round(totalTime / 1000)}s, Focus time: ${Math.round(focusTime / 1000)}s`);
        // Would typically save to server or localStorage
      });
    }
    
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full ${
        type === 'success' ? 'bg-green-500 text-white' : 
        type === 'error' ? 'bg-red-500 text-white' : 
        'bg-blue-500 text-white'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      // Remove after delay
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
    });
    
    // Add keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Only activate shortcuts if not typing in input fields
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      
      switch(e.key) {
        case 'ArrowLeft':
          if (e.ctrlKey) {
            const prevButton = document.querySelector('a[href*="b√†i tr∆∞·ªõc"], a[href*="B√†i tr∆∞·ªõc"]');
            if (prevButton) prevButton.click();
          }
          break;
        case 'ArrowRight':
          if (e.ctrlKey) {
            const nextButton = document.querySelector('a[href*="ti·∫øp theo"], a[href*="B√†i ti·∫øp theo"]');
            if (nextButton) nextButton.click();
          }
          break;
        case 'm':
          if (e.ctrlKey) {
            e.preventDefault();
            document.getElementById('mark-complete')?.click();
          }
          break;
        case 'b':
          if (e.ctrlKey) {
            e.preventDefault();
            document.getElementById('bookmark-btn')?.click();
          }
          break;
      }
    });
    
    // Add smooth scrolling to all internal links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>
