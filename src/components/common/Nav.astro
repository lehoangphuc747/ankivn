---
const { pathname } = Astro.url;
const isActive = (path: string) => pathname === path || pathname.startsWith(path + '/');
---
<nav class="sticky top-0 z-40 w-full bg-white/90 backdrop-blur-sm border-b border-gray-200">
  <div class="mx-auto max-w-6xl px-4 sm:px-6">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2 font-bold text-xl text-blue-600 hover:text-blue-700 transition-colors" aria-label="AnkiVN - Trang ch·ªß">
        <svg class="w-8 h-8" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
          <path d="M12 2L2 7L12 12L22 7L12 2Z"/>
          <path d="M2 17L12 22L22 17"/>
          <path d="M2 12L12 17L22 12"/>
        </svg>
        <span>AnkiVN</span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        <a href="/decks" class={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
          isActive('/decks') 
            ? 'bg-blue-100 text-blue-700' 
            : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
        }`}>
          B·ªô th·∫ª
        </a>
        <a href="/guides" class={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
          isActive('/guides') 
            ? 'bg-blue-100 text-blue-700' 
            : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
        }`}>
          H∆∞·ªõng d·∫´n
        </a>
        <a href="/blog" class={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
          isActive('/blog') 
            ? 'bg-blue-100 text-blue-700' 
            : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
        }`}>
          Blog
        </a>
      </div>

      <!-- Mobile menu button -->
      <button type="button" class="md:hidden p-3 rounded-lg text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 transition-all active:bg-gray-200" aria-controls="mobile-menu" aria-expanded="false">
        <span class="sr-only">M·ªü menu</span>
        <!-- Hamburger icon -->
        <svg class="w-6 h-6 hamburger-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
        <!-- Close icon (hidden initially) -->
        <svg class="w-6 h-6 close-icon hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Mobile menu -->
    <div class="md:hidden hidden" id="mobile-menu">
      <div class="border-t border-gray-200 bg-white shadow-sm">
        <div class="px-2 pt-2 pb-4 space-y-1">
          <a href="/decks" class={`flex items-center px-4 py-3 rounded-lg text-base font-medium transition-all ${
            isActive('/decks') 
              ? 'bg-blue-100 text-blue-700 border-l-4 border-blue-500' 
              : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100 active:bg-gray-200'
          }`}>
            <span class="mr-3 text-lg">üìö</span>
            B·ªô th·∫ª
          </a>
          <a href="/guides" class={`flex items-center px-4 py-3 rounded-lg text-base font-medium transition-all ${
            isActive('/guides') 
              ? 'bg-blue-100 text-blue-700 border-l-4 border-blue-500' 
              : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100 active:bg-gray-200'
          }`}>
            <span class="mr-3 text-lg">üìñ</span>
            H∆∞·ªõng d·∫´n
          </a>
          <a href="/blog" class={`flex items-center px-4 py-3 rounded-lg text-base font-medium transition-all ${
            isActive('/blog') 
              ? 'bg-blue-100 text-blue-700 border-l-4 border-blue-500' 
              : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100 active:bg-gray-200'
          }`}>
            <span class="mr-3 text-lg">‚úçÔ∏è</span>
            Blog
          </a>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.querySelector('[aria-controls="mobile-menu"]');
    const menu = document.getElementById('mobile-menu');
    const hamburgerIcon = button?.querySelector('.hamburger-icon');
    const closeIcon = button?.querySelector('.close-icon');
    
    if (button && menu && hamburgerIcon && closeIcon) {
      button.addEventListener('click', () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        const newExpanded = !expanded;
        
        button.setAttribute('aria-expanded', newExpanded.toString());
        
        // Toggle visibility with CSS classes
        if (newExpanded) {
          menu.classList.remove('hidden');
          hamburgerIcon.classList.add('hidden');
          closeIcon.classList.remove('hidden');
        } else {
          menu.classList.add('hidden');
          hamburgerIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        }
      });

      // Close menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!button.contains(event.target) && !menu.contains(event.target)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
          hamburgerIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        }
      });

      // Close menu on escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
          hamburgerIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        }
      });
    }
  });
</script>
