---
export interface Props {
  name: string;
  label?: string;
  options: Array<{ value: string; label: string; disabled?: boolean }>;
  value?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  helperText?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'bordered' | 'filled';
  class?: string;
}

const {
  name,
  label,
  options = [],
  value,
  placeholder = 'Chọn một tùy chọn...',
  required = false,
  disabled = false,
  error,
  helperText,
  size = 'md',
  variant = 'default',
  class: className = '',
  ...props
} = Astro.props;

const sizeClasses = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-3 py-2.5',
  lg: 'px-4 py-3 text-lg'
};

const variantClasses = {
  default: 'border border-gray-300 bg-white',
  bordered: 'border-2 border-gray-300 bg-white',
  filled: 'border border-gray-200 bg-gray-50'
};

const baseClasses = `
  block w-full rounded-lg transition-colors duration-200 appearance-none
  focus:ring-2 focus:ring-blue-500 focus:border-blue-500
  disabled:bg-gray-100 disabled:text-gray-500 disabled:cursor-not-allowed
`;

const errorClasses = error 
  ? 'border-red-300 focus:border-red-500 focus:ring-red-500' 
  : '';

const selectClasses = `
  ${baseClasses}
  ${sizeClasses[size]}
  ${variantClasses[variant]}
  ${errorClasses}
  ${className}
`.trim();

const selectId = `select-${name}`;
---

<div class="space-y-1">
  {label && (
    <label for={selectId} class="block text-sm font-medium text-gray-700">
      {label}
      {required && <span class="text-red-500 ml-1">*</span>}
    </label>
  )}

  <div class="relative">
    <select
      id={selectId}
      name={name}
      required={required}
      disabled={disabled}
      class={selectClasses}
      {...props}
    >
      {placeholder && (
        <option value="" disabled={required} selected={!value}>
          {placeholder}
        </option>
      )}
      {options.map(option => (
        <option 
          value={option.value} 
          disabled={option.disabled}
          selected={value === option.value}
        >
          {option.label}
        </option>
      ))}
    </select>

    {/* Custom dropdown arrow */}
    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>

    {error && (
      <div class="absolute inset-y-0 right-8 pr-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    )}
  </div>

  {error && (
    <p class="text-sm text-red-600 flex items-center gap-1">
      <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      {error}
    </p>
  )}

  {helperText && !error && (
    <p class="text-sm text-gray-500">{helperText}</p>
  )}
</div>
