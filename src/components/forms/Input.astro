---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'search' | 'url' | 'tel' | 'number';
  name: string;
  label?: string;
  placeholder?: string;
  value?: string;
  required?: boolean;
  disabled?: boolean;
  readonly?: boolean;
  error?: string;
  helperText?: string;
  icon?: string; // icon name or svg
  iconPosition?: 'left' | 'right';
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'bordered' | 'filled';
  class?: string;
}

const {
  type = 'text',
  name,
  label,
  placeholder,
  value,
  required = false,
  disabled = false,
  readonly = false,
  error,
  helperText,
  icon,
  iconPosition = 'left',
  size = 'md',
  variant = 'default',
  class: className = '',
  ...props
} = Astro.props;

const sizeClasses = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-3 py-2.5',
  lg: 'px-4 py-3 text-lg'
};

const variantClasses = {
  default: 'border border-gray-300 bg-white',
  bordered: 'border-2 border-gray-300 bg-white',
  filled: 'border border-gray-200 bg-gray-50'
};

const baseClasses = `
  block w-full rounded-lg transition-colors duration-200
  focus:ring-2 focus:ring-blue-500 focus:border-blue-500
  disabled:bg-gray-100 disabled:text-gray-500 disabled:cursor-not-allowed
  readonly:bg-gray-50 readonly:text-gray-700
`;

const errorClasses = error 
  ? 'border-red-300 focus:border-red-500 focus:ring-red-500' 
  : '';

const iconClasses = icon 
  ? iconPosition === 'left' 
    ? 'pl-10' 
    : 'pr-10'
  : '';

const inputClasses = `
  ${baseClasses}
  ${sizeClasses[size]}
  ${variantClasses[variant]}
  ${errorClasses}
  ${iconClasses}
  ${className}
`.trim();

const inputId = `input-${name}`;
---

<div class="space-y-1">
  {label && (
    <label for={inputId} class="block text-sm font-medium text-gray-700">
      {label}
      {required && <span class="text-red-500 ml-1">*</span>}
    </label>
  )}

  <div class="relative">
    {icon && iconPosition === 'left' && (
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        {icon === 'search' && (
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        )}
        {icon === 'email' && (
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
          </svg>
        )}
        {icon === 'user' && (
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
        )}
        {icon === 'lock' && (
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        )}
      </div>
    )}

    <input
      id={inputId}
      name={name}
      type={type}
      value={value}
      placeholder={placeholder}
      required={required}
      disabled={disabled}
      readonly={readonly}
      class={inputClasses}
      {...props}
    />

    {icon && iconPosition === 'right' && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        {/* Add right-side icons here if needed */}
      </div>
    )}

    {error && (
      <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    )}
  </div>

  {error && (
    <p class="text-sm text-red-600 flex items-center gap-1">
      <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      {error}
    </p>
  )}

  {helperText && !error && (
    <p class="text-sm text-gray-500">{helperText}</p>
  )}
</div>
