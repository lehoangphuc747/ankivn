---
interface Props {
  src: string;
  poster?: string;
  title?: string;
  width?: string;
  height?: string;
  autoplay?: boolean;
  muted?: boolean;
  loop?: boolean;
  preload?: 'none' | 'metadata' | 'auto';
}

const {
  src,
  poster,
  title = "Video",
  width = "100%",
  height = "auto",
  autoplay = false,
  muted = true,
  loop = false,
  preload = "metadata"
} = Astro.props;
---

<div class="video-embed-container my-8" data-video-embed>
  <div class="video-wrapper relative rounded-xl overflow-hidden shadow-xl bg-gray-100">

    <!-- Video element -->
    <video
      controls
      width={width}
      height={height}
      poster={poster}
      class="video-element w-full h-auto"
      preload={preload}
      autoplay={autoplay}
      muted={muted}
      loop={loop}
      playsinline
      crossorigin="anonymous"
      aria-label={title}
    >
      <source src={src} type="video/mp4" />
      <source src={src.replace('.mp4', '.webm')} type="video/webm" />
      <p class="text-gray-600 text-sm p-4 text-center bg-gray-50 rounded-lg">
        Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video.
        <a href={src} class="text-blue-600 hover:underline block mt-1" target="_blank" rel="noopener noreferrer">
          üì• T·∫£i video
        </a>
      </p>
    </video>
  </div>

  <!-- Video title -->
  {title && title !== "Video" && (
    <div class="video-title mt-3 text-center">
      <h4 class="text-sm font-medium text-gray-700 bg-gray-50 px-3 py-2 rounded-lg inline-block">
        üé¨ {title}
      </h4>
    </div>
  )}
</div>

<style>
  .video-embed-container {
    max-width: 800px;
    margin: 2rem auto;
  }

  .video-wrapper {
    position: relative;
    width: 100%;
    aspect-ratio: 16 / 9;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  }

  .loading-placeholder {
    z-index: 10;
  }

  .video-element {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
    transition: none;
  }

  .video-element:hover {
    filter: none !important;
    opacity: 1 !important;
  }

  .video-element.loaded {
    opacity: 1;
  }

  /* Custom video controls styling */
  .video-element::-webkit-media-controls-panel {
    background: rgba(0, 0, 0, 0.7);
  }

  .video-element::-webkit-media-controls-current-time-display,
  .video-element::-webkit-media-controls-time-remaining-display {
    color: white;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .video-embed-container {
      margin: 1.5rem 1rem;
    }

    .video-wrapper {
      aspect-ratio: 16 / 9;
    }

    .video-title h4 {
      font-size: 0.875rem;
      padding: 0.5rem 1rem;
    }
  }

  @media (max-width: 480px) {
    .video-embed-container {
      margin: 1rem 0.5rem;
    }

    .video-title h4 {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }
  }
</style>

<script>
  // Enhanced video handling with loading states and error recovery
  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('.video-element');

    videos.forEach(video => {
      const wrapper = video.closest('.video-wrapper');

      // Add loading state
      video.addEventListener('loadstart', () => {
        if (wrapper) {
          // @ts-ignore
          wrapper.style.opacity = '0.7';
        }
      });

      // Remove loading state when video is ready
      video.addEventListener('loadeddata', () => {
        if (wrapper) {
          // @ts-ignore
          wrapper.style.opacity = '1';
          // @ts-ignore
          wrapper.style.transition = 'opacity 0.3s ease';
        }
      });

      // Enhanced error handling
      video.addEventListener('error', (e) => {
        console.error('Video load error:', e);
        const container = video.closest('.video-wrapper');
        if (container) {
          container.innerHTML = `
            <div class="text-center p-8 bg-red-50 rounded-xl border border-red-200">
              <svg class="w-12 h-12 text-red-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
              <p class="text-sm text-red-600 font-medium mb-1">Kh√¥ng th·ªÉ t·∫£i video</p>
              <p class="text-xs text-gray-500 mb-3">Video c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c ƒë∆∞·ªùng d·∫´n kh√¥ng ch√≠nh x√°c</p>
              <a href="${video.querySelector('source')?.src || '#'}" class="inline-flex items-center gap-2 px-3 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors text-xs">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Th·ª≠ t·∫£i tr·ª±c ti·∫øp
              </a>
            </div>
          `;
        }
      });

      // Handle network errors
      video.addEventListener('abort', () => {
        console.warn('Video loading aborted');
      });

      // Add play/pause analytics (optional)
      video.addEventListener('play', () => {
        // Could add analytics tracking here
        console.log('Video started playing');
      });
    });
  });
</script>