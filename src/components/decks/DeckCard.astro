---
interface Props {
  title: string;
  cover?: string;
  date?: string;
  category?: string;
  subCategory?: string;
  href: string;
  tags?: string[];
}

const { title, cover, date, category, subCategory, href, tags = [] } = Astro.props;
const slug = href.split('/').pop();
const displayCover = cover ?? '/default-thumbnail.webp';
---

<article class="group relative bg-white/80 backdrop-blur-sm rounded-3xl border-2 border-gray-200/60 overflow-hidden hover:shadow-2xl hover:border-blue-300/80 transition-all duration-500 hover:-translate-y-2">
  <a href={href} target="_blank" rel="noopener noreferrer" class="block">
    <!-- Cover Image with Overlay -->
    <div class="relative aspect-video bg-gradient-to-br from-blue-50 to-emerald-50 overflow-hidden">
      <img 
        src={displayCover} 
        alt={title}
        loading="lazy"
        decoding="async"
        fetchpriority="low"
        class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
      />
      
      <!-- Gradient overlay on hover -->
      <div class="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    </div>

    <!-- Content -->
    <div class="p-6">
      <!-- Categories -->
      {(category || subCategory) && (
        <div class="mb-3 flex flex-wrap gap-2">
          {category && (
            <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-bold bg-gray-100 text-gray-800">
              {category}
            </span>
          )}
          {subCategory && (
            <span class="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-md">
              {subCategory}
            </span>
          )}
        </div>
      )}

      <!-- Title -->
      <h3 class="font-bold text-lg text-gray-900 mb-3 line-clamp-3 group-hover:text-blue-600 transition-colors duration-300 leading-tight break-words hyphens-auto min-h-[4.5rem]">
        {title}
      </h3>

      <!-- Tags -->
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-1 mb-4">
          {tags.slice(0, 3).map(tag => (
            <span class="inline-flex items-center px-2 py-1 rounded-md text-xs bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors">
              #{tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="text-xs text-gray-400 px-2 py-1">+{tags.length - 3} kh√°c</span>
          )}
        </div>
      )}
    </div>
  </a>
</article>
