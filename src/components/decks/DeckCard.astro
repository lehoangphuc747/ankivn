﻿---
interface Props {
  title: string;
  cover?: string;
  date?: string;
  category?: string;
  subCategory?: string;
  href: string;
  tags?: string[];
  type?: 'BÁN' | 'CHIA SẺ';
  searchHighlights?: string[];
  view?: 'grid' | 'list';
  viewCount?: number;
}

const { title, cover, date, category, subCategory, href, tags = [], type, searchHighlights = [], view = 'grid', viewCount } = Astro.props;
const slug = href.split('/').pop();
const displayCover = cover ?? '/default-thumbnail.webp';

function highlightTitle(title: string, highlights: string[]): string {
  if (!highlights.length) return title;

  let highlightedTitle = title;
  const normalizedTitle = title.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');

  // Sort highlights by length (longest first) to avoid conflicts
  const sortedHighlights = [...highlights].sort((a, b) => b.length - a.length);

  for (const highlight of sortedHighlights) {
    const normalizedHighlight = highlight.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    const regex = new RegExp(`(${normalizedHighlight})`, 'gi');

    // Find matches in the original title
    const matches = [];
    let match;
    while ((match = regex.exec(normalizedTitle)) !== null) {
      const originalMatch = title.substr(match.index, match[0].length);
      matches.push({
        text: originalMatch,
        index: match.index,
        length: match[0].length
      });
    }

    // Apply highlights (work backwards to maintain indices)
    matches.reverse().forEach(({ text, index }) => {
      const before = highlightedTitle.substring(0, index);
      const after = highlightedTitle.substring(index + text.length);
      highlightedTitle = `${before}<mark class="bg-yellow-200 px-0.5 rounded">${text}</mark>${after}`;
    });
  }

  return highlightedTitle;
}
---

<style>
  .deck-title {
    font-size: 17px; /* Có thể điều chỉnh font size ở đây: 12px, 14px, 16px, 18px, 20px, 22px, 24px, etc. */
    font-weight: 700;
    line-height: 1.4;
    color: rgb(17 24 39); /* text-gray-900 */
    margin-bottom: 0.75rem;
    padding-left: 0;
    padding-right: 0;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    transition: color 200ms;
    word-wrap: break-word;
    hyphens: auto;
    min-height: 4.5rem;
  }
</style>

<style>
  .deck-card-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }
</style>

{view === 'grid' ? (
  <!-- Grid View Layout -->
  <article class="group relative bg-white/80 backdrop-blur-sm rounded-3xl border-2 border-gray-200/60 overflow-hidden hover:border-blue-300/40 transition-all duration-200">
    <a href={href} target="_blank" rel="noopener noreferrer" class="block">
      <!-- Cover Image with Overlay -->
      <div class="relative aspect-video bg-gradient-to-br from-blue-50 to-emerald-50 overflow-hidden">
        <img
          src={displayCover}
          alt={title}
          loading="lazy"
          decoding="async"
          fetchpriority="low"
          class="w-full h-full object-cover transition-transform duration-200 ease-out"
        />

        <!-- Gradient overlay on hover -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/10 via-transparent to-transparent opacity-0 transition-opacity duration-150"></div>

        <!-- Type Badge -->
        {type === 'BÁN' && (
          <div class="deck-card-badge">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-bold text-white bg-gradient-to-r from-red-500 to-orange-500 shadow-lg">BÁN</span>
          </div>
        )}
      </div>

      <!-- Content -->
      <div class="p-6">
        <!-- Categories -->
        {(category || subCategory || viewCount !== undefined) && (
          <div class="mb-3 flex flex-wrap gap-2">
            {category && (
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-bold bg-gray-100 text-gray-800">
                {category}
              </span>
            )}
            {subCategory && (
              <span class="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-md">
                {subCategory}
              </span>
            )}
            {viewCount !== undefined && (
              <div class="inline-flex items-center px-3 py-1.5 bg-green-100 text-green-800 font-medium rounded-lg border border-green-200">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                <span class="text-xs">{(viewCount || 0).toLocaleString('vi-VN')}</span>
              </div>
            )}
          </div>
        )}

        <!-- Title -->
        <div class="deck-title">
          {searchHighlights.length > 0 ? (
            <span set:html={highlightTitle(title, searchHighlights)} />
          ) : (
            title
          )}
        </div>

        <!-- Tags -->
        {tags.length > 0 && (
          <div class="flex flex-wrap gap-1 mb-4">
            {tags.slice(0, 3).map(tag => (
              <span class="inline-flex items-center px-2 py-1 rounded-md text-xs bg-gray-100 text-gray-600 transition-colors">
                #{tag}
              </span>
            ))}
            {tags.length > 3 && (
              <span class="text-xs text-gray-400 px-2 py-1">+{tags.length - 3} khác</span>
            )}
          </div>
        )}
      </div>
    </a>
  </article>
) : (
  <!-- List View Layout -->
  <article class="relative bg-white/80 backdrop-blur-sm rounded-2xl border-2 border-gray-200/60 overflow-hidden hover:border-blue-300/40 transition-all duration-200 px-4 py-3">
    <a href={href} target="_blank" rel="noopener noreferrer" class="flex gap-4">
      <!-- Cover Image -->
      <div class="flex-shrink-0 w-20 h-20 bg-gradient-to-br from-blue-50 to-emerald-50 rounded-xl overflow-hidden">
        <img
          src={displayCover}
          alt={title}
          class="w-full h-full object-cover"
          loading="lazy"
        />
      </div>

      <!-- Content -->
      <div class="flex-1 min-w-0">
        <!-- Categories -->
        {(category || subCategory || viewCount !== undefined) && (
          <div class="flex flex-wrap gap-2 mb-1">
            {category && (
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold bg-gray-100 text-gray-800">
                {category}
              </span>
            )}
            {subCategory && (
              <span class="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-md">
                {subCategory}
              </span>
            )}
            {viewCount !== undefined && (
              <div class="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 font-medium rounded-md border border-green-200">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                <span class="text-xs">{(viewCount || 0).toLocaleString('vi-VN')}</span>
              </div>
            )}
          </div>
        )}

        <!-- Title -->
        <div class="font-bold text-lg text-gray-900 mt-3 mb-3 line-clamp-2 leading-tight">
          {searchHighlights.length > 0 ? (
            <span set:html={highlightTitle(title, searchHighlights)} />
          ) : (
            title
          )}
        </div>

        <!-- Tags -->
        {tags.length > 0 && (
          <div class="flex flex-wrap gap-1">
            {tags.slice(0, 4).map(tag => (
              <span class="inline-flex items-center px-2 py-1 rounded-md text-xs bg-gray-100 text-gray-600">
                #{tag}
              </span>
            ))}
            {tags.length > 4 && (
              <span class="text-xs text-gray-400 px-2 py-1">+{tags.length - 4} khác</span>
            )}
          </div>
        )}
      </div>

      <!-- Type Badge for List View -->
      {type === 'BÁN' && (
        <div class="absolute top-3 right-3">
          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-bold text-white bg-gradient-to-r from-red-500 to-orange-500">BÁN</span>
        </div>
      )}
    </a>
  </article>
)}
