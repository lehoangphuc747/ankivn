---
interface Props {
  images: Array<{
    src: string;
    alt: string;
  }>;
  spacing?: 'sm' | 'md' | 'lg' | 'xl';
}

const { images, spacing = 'lg' } = Astro.props;
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

{images.length > 0 && (
  <div class="image-carousel" data-carousel-id={carouselId}>
    <!-- Main Image Display -->
    <div class="relative bg-gray-100 rounded-2xl overflow-hidden shadow-lg mb-6">
      <div class="aspect-video relative bg-white">
        {images.map((image, index) => (
          <img 
            src={image.src} 
            alt={image.alt}
            class={`carousel-image absolute inset-0 w-full h-full object-contain transition-opacity duration-300 cursor-zoom-in ${index === 0 ? 'opacity-100 z-10' : 'opacity-0 z-0'}`}
            data-index={index}
            loading={index === 0 ? 'eager' : 'lazy'}
            onclick="enterFullscreen(this)"
          />
        ))}
        
        <!-- Navigation Areas - Large clickable zones -->
        {images.length > 1 && (
          <>
            <!-- Previous Area - Left third of image -->
            <button 
              class="carousel-prev absolute left-0 top-0 w-1/3 h-full bg-transparent hover:bg-black/5 transition-all duration-200 z-15 flex items-center justify-start pl-4"
              aria-label="Previous image"
            >
              <div class="bg-black/50 hover:bg-black/70 text-white p-3 rounded-full transition-all duration-200 hover:scale-110">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
              </div>
            </button>
            
            <!-- Next Area - Right third of image -->
            <button 
              class="carousel-next absolute right-0 top-0 w-1/3 h-full bg-transparent hover:bg-black/5 transition-all duration-200 z-15 flex items-center justify-end pr-4"
              aria-label="Next image"
            >
              <div class="bg-black/50 hover:bg-black/70 text-white p-3 rounded-full transition-all duration-200 hover:scale-110">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </button>
          </>
        )}
        
        <!-- Image Counter -->
        {images.length > 1 && (
          <div class="absolute top-4 right-4 bg-black/50 text-white px-3 py-1 rounded-full text-sm z-20">
            <span class="current-index">1</span> / {images.length}
          </div>
        )}
      </div>
    </div>
    
    <!-- Thumbnail Navigation -->
    {images.length > 1 && (
      <div class="thumbnail-nav">
        <div class="flex gap-3 justify-center overflow-x-auto pb-2">
          {images.map((image, index) => (
            <button
              class={`thumbnail flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 transition-all duration-200 ${index === 0 ? 'border-[#D97D55] border-6 shadow-xl opacity-100' : 'border-gray-200 opacity-60 hover:opacity-80'}`}
              data-index={index}
              aria-label={`View image ${index + 1}`}
            >
              <img 
                src={image.src} 
                alt={image.alt}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </button>
          ))}
        </div>
      </div>
    )}
  </div>
)}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousels = document.querySelectorAll('.image-carousel');
    
    carousels.forEach(carousel => {
      const images = carousel.querySelectorAll('.carousel-image');
      const thumbnails = carousel.querySelectorAll('.thumbnail');
      const prevBtn = carousel.querySelector('.carousel-prev');
      const nextBtn = carousel.querySelector('.carousel-next');
      const counter = carousel.querySelector('.current-index');
      
      let currentIndex = 0;
      
      function showImage(index) {
        // Completely hide all images first
        images.forEach((img, i) => {
          if (i === index) {
            // Show only the current image
            img.style.display = 'block';
            img.classList.remove('opacity-0');
            img.classList.add('opacity-100');
            img.classList.add('z-10');
            img.classList.remove('z-0');
          } else {
            // Completely hide other images
            img.style.display = 'none';
            img.classList.add('opacity-0');
            img.classList.remove('opacity-100');
            img.classList.remove('z-10');
            img.classList.add('z-0');
          }
        });
        
        // Update thumbnails
        thumbnails.forEach((thumb, i) => {
          if (i === index) {
            thumb.classList.add('border-[#D97D55]', 'border-4', 'shadow-lg', 'opacity-100');
            thumb.classList.remove('border-gray-200', 'border-2', 'opacity-60');
          } else {
            thumb.classList.remove('border-[#D97D55]', 'border-4', 'shadow-lg', 'opacity-100');
            thumb.classList.add('border-gray-200', 'border-2', 'opacity-60');
          }
        });
        
        // Update counter
        if (counter) {
          counter.textContent = (index + 1).toString();
        }
        
        currentIndex = index;
      }
      
      function nextImage() {
        const newIndex = (currentIndex + 1) % images.length;
        showImage(newIndex);
      }
      
      function prevImage() {
        const newIndex = (currentIndex - 1 + images.length) % images.length;
        showImage(newIndex);
      }
      
      // Event listeners
      if (prevBtn) prevBtn.addEventListener('click', prevImage);
      if (nextBtn) nextBtn.addEventListener('click', nextImage);
      
      // Thumbnail clicks
      thumbnails.forEach((thumb, index) => {
        thumb.addEventListener('click', () => showImage(index));
      });
      
      // Keyboard navigation
      carousel.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          prevImage();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          nextImage();
        }
      });
      
      // Make carousel focusable for keyboard navigation
      carousel.setAttribute('tabindex', '0');
    });
  });

  // Native Fullscreen API functionality with full carousel
  window.enterFullscreen = function(imgElement) {
    const currentIndex = parseInt(imgElement.dataset.index);
    const carousel = imgElement.closest('.image-carousel');
    const images = Array.from(carousel.querySelectorAll('.carousel-image'));
    
    // Create fullscreen container
    const fullscreenContainer = document.createElement('div');
    fullscreenContainer.id = 'native-fullscreen-container';
    fullscreenContainer.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: black;
      display: flex;
      flex-direction: column;
      z-index: 9999;
      color: white;
    `;
    
    // Main image area
    const imageArea = document.createElement('div');
    imageArea.style.cssText = `
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      padding: 20px;
    `;
    
    // Current image
    const fullscreenImg = document.createElement('img');
    fullscreenImg.id = 'fullscreen-current-image';
    fullscreenImg.src = images[currentIndex].src;
    fullscreenImg.alt = images[currentIndex].alt;
    fullscreenImg.style.cssText = `
      max-width: 100%;
      max-height: 100%;
      width: auto;
      height: auto;
      object-fit: contain;
    `;
    
    // Navigation buttons (only show if multiple images)
    let prevBtn, nextBtn;
    if (images.length > 1) {
      prevBtn = document.createElement('button');
      prevBtn.innerHTML = `
        <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      `;
      prevBtn.style.cssText = `
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0,0,0,0.7);
        border: none;
        color: white;
        padding: 12px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      prevBtn.onmouseover = () => prevBtn.style.background = 'rgba(0,0,0,0.9)';
      prevBtn.onmouseout = () => prevBtn.style.background = 'rgba(0,0,0,0.7)';
      
      nextBtn = document.createElement('button');
      nextBtn.innerHTML = `
        <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      `;
      nextBtn.style.cssText = prevBtn.style.cssText.replace('left: 20px', 'right: 20px');
      nextBtn.onmouseover = () => nextBtn.style.background = 'rgba(0,0,0,0.9)';
      nextBtn.onmouseout = () => nextBtn.style.background = 'rgba(0,0,0,0.7)';
    }
    
    // Close button
    const closeBtn = document.createElement('button');
    closeBtn.innerHTML = `
      <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    `;
    closeBtn.style.cssText = `
      position: absolute;
      top: 20px;
      right: 20px;
      background: rgba(0,0,0,0.7);
      border: none;
      color: white;
      padding: 12px;
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      justify-content: center;
    `;
    closeBtn.onmouseover = () => closeBtn.style.background = 'rgba(0,0,0,0.9)';
    closeBtn.onmouseout = () => closeBtn.style.background = 'rgba(0,0,0,0.7)';
    
    // Image counter (only show if multiple images)
    let counter;
    if (images.length > 1) {
      counter = document.createElement('div');
      counter.style.cssText = `
        position: absolute;
        top: 20px;
        left: 20px;
        background: rgba(0,0,0,0.7);
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
      `;
      counter.textContent = `${currentIndex + 1} / ${images.length}`;
    }
    
    // Thumbnails area (only show if multiple images)
    let thumbnailArea;
    if (images.length > 1) {
      thumbnailArea = document.createElement('div');
      thumbnailArea.style.cssText = `
        height: 100px;
        background: rgba(0,0,0,0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        padding: 0 20px;
        overflow-x: auto;
      `;
      
      images.forEach((img, index) => {
        const thumb = document.createElement('img');
        thumb.src = img.src;
        thumb.alt = img.alt;
        thumb.style.cssText = `
          width: 80px;
          height: 60px;
          object-fit: cover;
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.2s;
          border: 4px solid ${index === currentIndex ? '#D97D55' : 'transparent'};
          box-shadow: ${index === currentIndex ? '0 4px 12px rgba(217, 125, 85, 0.3)' : 'none'};
          opacity: ${index === currentIndex ? '1' : '0.7'};
        `;
        thumb.onmouseover = () => {
          if (index !== currentIndex) thumb.style.opacity = '1';
        };
        thumb.onmouseout = () => {
          if (index !== currentIndex) thumb.style.opacity = '0.7';
        };
        thumb.onclick = () => showImageInFullscreen(index);
        
        thumbnailArea.appendChild(thumb);
      });
    }
    
    // Assemble the fullscreen interface
    imageArea.appendChild(fullscreenImg);
    if (prevBtn) imageArea.appendChild(prevBtn);
    if (nextBtn) imageArea.appendChild(nextBtn);
    imageArea.appendChild(closeBtn);
    if (counter) imageArea.appendChild(counter);
    
    fullscreenContainer.appendChild(imageArea);
    if (thumbnailArea) fullscreenContainer.appendChild(thumbnailArea);
    
    document.body.appendChild(fullscreenContainer);
    
    let currentFullscreenIndex = currentIndex;
    
    // Navigation functions
    function showImageInFullscreen(index) {
      currentFullscreenIndex = index;
      fullscreenImg.src = images[index].src;
      fullscreenImg.alt = images[index].alt;
      
      if (counter) {
        counter.textContent = `${index + 1} / ${images.length}`;
      }
      
      if (thumbnailArea) {
        const thumbs = thumbnailArea.querySelectorAll('img');
        thumbs.forEach((thumb, i) => {
          thumb.style.border = i === index ? '8px solid #D97D55' : '2px solid transparent';
          thumb.style.boxShadow = i === index ? '0 8px 20px rgba(217, 125, 85, 0.5)' : 'none';
          thumb.style.opacity = i === index ? '1' : '0.7';
        });
      }
    }
    
    function prevImage() {
      const newIndex = (currentFullscreenIndex - 1 + images.length) % images.length;
      showImageInFullscreen(newIndex);
    }
    
    function nextImage() {
      const newIndex = (currentFullscreenIndex + 1) % images.length;
      showImageInFullscreen(newIndex);
    }
    
    // Event listeners
    if (prevBtn) prevBtn.onclick = prevImage;
    if (nextBtn) nextBtn.onclick = nextImage;
    closeBtn.onclick = exitFullscreen;
    
    // Keyboard navigation
    const handleKeydown = (e) => {
      if (e.key === 'Escape') {
        exitFullscreen();
      } else if (e.key === 'ArrowLeft' && images.length > 1) {
        prevImage();
      } else if (e.key === 'ArrowRight' && images.length > 1) {
        nextImage();
      }
    };
    document.addEventListener('keydown', handleKeydown);
    
    // Request native fullscreen
    if (fullscreenContainer.requestFullscreen) {
      fullscreenContainer.requestFullscreen().catch(console.error);
    } else if (fullscreenContainer.webkitRequestFullscreen) {
      fullscreenContainer.webkitRequestFullscreen();
    } else if (fullscreenContainer.mozRequestFullScreen) {
      fullscreenContainer.mozRequestFullScreen();
    } else if (fullscreenContainer.msRequestFullscreen) {
      fullscreenContainer.msRequestFullscreen();
    }
    
    // Handle fullscreen change events
    const handleFullscreenChange = function() {
      if (!document.fullscreenElement && 
          !document.webkitFullscreenElement && 
          !document.mozFullScreenElement && 
          !document.msFullscreenElement) {
        // Exited fullscreen, clean up
        const container = document.getElementById('native-fullscreen-container');
        if (container) {
          container.remove();
        }
        document.removeEventListener('keydown', handleKeydown);
        document.removeEventListener('fullscreenchange', handleFullscreenChange);
        document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);
        document.removeEventListener('mozfullscreenchange', handleFullscreenChange);
        document.removeEventListener('MSFullscreenChange', handleFullscreenChange);
      }
    };
    
    document.addEventListener('fullscreenchange', handleFullscreenChange);
    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
    document.addEventListener('mozfullscreenchange', handleFullscreenChange);
    document.addEventListener('MSFullscreenChange', handleFullscreenChange);
  };

  // Exit fullscreen function
  window.exitFullscreen = function() {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    }
  };

  // ESC key to exit fullscreen (handled by browser automatically)
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const container = document.getElementById('native-fullscreen-container');
      if (container) {
        exitFullscreen();
      }
    }
  });
</script>
