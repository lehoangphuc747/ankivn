---
import BaseLayout from '@/layouts/BaseLayout.astro';
import DeckFilters from '@/components/decks/DeckFilters.jsx';
import DeckCard from '@/components/decks/DeckCard.astro';
import { getCollection } from 'astro:content';
const decks = await getCollection('decks');
---
<BaseLayout title="Bộ thẻ">
  <!-- Hero Header -->
  <section class="hero-section-full">
    <!-- Background decorations -->
    <div class="hero-bg-decorations">
      <div class="hero-radial-overlay"></div>
      <div class="hero-side-blur-right"></div>
      <div class="hero-side-blur-left"></div>
    </div>
    
    <div class="relative w-full">
      <div class="text-center py-16 lg:py-20 px-4 sm:px-6 fade-in-scroll">
        <!-- Icon badge -->
        <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-3xl mb-6 shadow-2xl transform hover:scale-110 transition-transform duration-500">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
        </div>

        <!-- Title & Description -->
        <div class="mb-8 space-y-4">
          <h1 class="text-4xl sm:text-5xl lg:text-6xl font-black leading-tight">
            <span class="bg-gradient-to-r from-blue-600 via-purple-600 to-emerald-600 bg-clip-text text-transparent animate-gradient bg-300% font-display">
              Bộ thẻ Anki
            </span>
          </h1>
          <div class="w-20 h-1 bg-gradient-to-r from-blue-500 to-emerald-500 mx-auto rounded-full"></div>
        </div>

        <div class="max-w-3xl mx-auto mb-8 fade-in-scroll" style="animation-delay: 300ms;">
          <p class="text-lg lg:text-xl text-gray-700 leading-relaxed mb-4 font-medium">
            Khám phá thư viện deck Anki đa dạng với hàng nghìn bộ thẻ chất lượng cao
          </p>
          <p class="text-base lg:text-lg text-gray-600 leading-relaxed">
            Tìm kiếm và lọc theo chủ đề, ngôn ngữ, cấp độ để tìm deck phù hợp với nhu cầu học tập của bạn
          </p>
        </div>

        <!-- Quick Stats -->
        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 max-w-2xl mx-auto mb-8 fade-in-scroll" style="animation-delay: 600ms;">
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              {decks.length}
            </div>
            <div class="text-sm text-gray-600 font-medium">Deck có sẵn</div>
          </div>
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              {Array.from(new Set(decks.map(d => d.data.category).filter(Boolean))).length}
            </div>
            <div class="text-sm text-gray-600 font-medium">Chủ đề</div>
          </div>
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              100%
            </div>
            <div class="text-sm text-gray-600 font-medium">Miễn phí</div>
          </div>
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              ⚡
            </div>
            <div class="text-sm text-gray-600 font-medium">Tải nhanh</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Decks Content -->
  <section class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Section Heading -->
    <div class="text-center mb-8">
      <h2 class="text-2xl font-bold text-gray-900 mb-4">Danh sách bộ thẻ</h2>
      <p class="text-gray-600">Sử dụng bộ lọc bên dưới để tìm deck phù hợp</p>
    </div>

    <!-- Filters -->
    <div class="bg-white/80 backdrop-blur-sm rounded-3xl p-6 border border-white/20 shadow-xl mb-8 fade-in-scroll">
      <DeckFilters client:only="react" items={decks} />
    </div>

    <!-- View Toggle - Positioned between filters and content -->
    <div class="flex justify-center mb-8">
      <div class="inline-flex items-center gap-2 bg-white/80 backdrop-blur-sm rounded-2xl p-2 border border-white/40 shadow-lg">
        <button id="grid-view-btn" class="flex items-center gap-2 px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 active">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
          </svg>
          Grid
        </button>
        <button id="list-view-btn" class="flex items-center gap-2 px-4 py-2 rounded-xl text-sm font-medium text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
          </svg>
          List
        </button>
      </div>
    </div>

    <!-- Decks Grid View -->
    <div id="deck-grid" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 fade-in-scroll" style="animation-delay: 300ms;">
      {decks.map((d) => (
        <div data-deck-item 
             data-title={d.data.title.toLowerCase()} 
             data-category={d.data.category || ''} 
             data-subcategory={d.data.subCategory || ''} 
             data-tags={(d.data.tags || []).map(t => t.toLowerCase()).join(',')}
             data-type={d.data.type || 'CHIA SẺ'}
             data-date={d.data.date || ''}>
          <DeckCard
            title={d.data.title}
            cover={d.data.cover}
            date={d.data.date}
            category={d.data.category}
            subCategory={d.data.subCategory}
            type={d.data.type}
            href={`/decks/${d.slug}`}
          />
        </div>
      ))}
    </div>

    <!-- Decks List View -->
    <div id="deck-list" class="hidden space-y-4 fade-in-scroll" style="animation-delay: 300ms;">
      {decks.map((d) => (
        <div data-deck-item 
             data-title={d.data.title.toLowerCase()} 
             data-category={d.data.category || ''} 
             data-subcategory={d.data.subCategory || ''} 
             data-tags={(d.data.tags || []).map(t => t.toLowerCase()).join(',')}
             data-type={d.data.type || 'CHIA SẺ'}
             data-date={d.data.date || ''}>
          <article class="relative bg-white/80 backdrop-blur-sm rounded-2xl border-2 border-gray-200/60 overflow-hidden hover:border-blue-300/40 transition-all duration-200 px-4 py-3">
            <a href={`/decks/${d.slug}`} target="_blank" rel="noopener noreferrer" class="flex gap-4">
              <!-- Cover Image -->
              <div class="flex-shrink-0 w-20 h-20 bg-gradient-to-br from-blue-50 to-emerald-50 rounded-xl overflow-hidden">
                <img
                  src={d.data.cover || '/default-thumbnail.webp'}
                  alt={d.data.title}
                  class="w-full h-full object-cover"
                  loading="lazy"
                />
              </div>

              <!-- Content -->
              <div class="flex-1 min-w-0">
                <!-- Categories -->
                {(d.data.category || d.data.subCategory) && (
                  <div class="flex flex-wrap gap-2 mb-1">
                    {d.data.category && (
                      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold bg-gray-100 text-gray-800">
                        {d.data.category}
                      </span>
                    )}
                    {d.data.subCategory && (
                      <span class="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-md">
                        {d.data.subCategory}
                      </span>
                    )}
                  </div>
                )}

                <!-- Title -->
                <div class="font-bold text-lg text-gray-900 mt-3 mb-3 line-clamp-2 leading-tight">
                  {d.data.title}
                </div>

                <!-- Tags -->
                {d.data.tags && d.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-1">
                    {d.data.tags.slice(0, 4).map(tag => (
                      <span class="inline-flex items-center px-2 py-1 rounded-md text-xs bg-gray-100 text-gray-600">
                        #{tag}
                      </span>
                    ))}
                    {d.data.tags.length > 4 && (
                      <span class="text-xs text-gray-400 px-2 py-1">+{d.data.tags.length - 4} khác</span>
                    )}
                  </div>
                )}
              </div>
            </a>

            <!-- Type Badge for List View -->
            {d.data.type === 'BÁN' && (
              <div class="absolute top-3 right-3">
                <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-bold text-white bg-gradient-to-r from-red-500 to-orange-500">BÁN</span>
              </div>
            )}
          </article>
        </div>
      ))}
    </div>

    <!-- Empty State -->
    <div id="empty-state" class="hidden text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      <h3 class="text-lg font-medium text-gray-900 mb-2">Không tìm thấy deck nào</h3>
      <p class="text-gray-500 mb-4">Thử thay đổi bộ lọc hoặc từ khóa tìm kiếm.</p>
    </div>
  </section>

  <script>
    // View toggle functionality
    let allGridItems = [];
    let allListItems = [];
    
    document.addEventListener('DOMContentLoaded', () => {
      allGridItems = Array.from(document.getElementById('deck-grid')?.querySelectorAll('[data-deck-item]') || []);
      allListItems = Array.from(document.getElementById('deck-list')?.querySelectorAll('[data-deck-item]') || []);
      
      const gridViewBtn = document.getElementById('grid-view-btn');
      const listViewBtn = document.getElementById('list-view-btn');
      const deckGrid = document.getElementById('deck-grid');
      const deckList = document.getElementById('deck-list');

      function switchToGridView() {
        gridViewBtn?.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
        gridViewBtn?.classList.remove('text-gray-600');
        listViewBtn?.classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        listViewBtn?.classList.add('text-gray-600');
        
        deckGrid?.classList.remove('hidden');
        deckList?.classList.add('hidden');
      }

      function switchToListView() {
        listViewBtn?.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
        listViewBtn?.classList.remove('text-gray-600');
        gridViewBtn?.classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        gridViewBtn?.classList.add('text-gray-600');
        
        deckList?.classList.remove('hidden');
        deckGrid?.classList.add('hidden');
      }

      gridViewBtn?.addEventListener('click', switchToGridView);
      listViewBtn?.addEventListener('click', switchToListView);

      // Start with grid view active
      switchToGridView();
    });

    // Listen for filter events from DeckFilters component
    window.addEventListener('deckFiltersChanged', (event: any) => {
      const { filtered } = event.detail;
      const deckGrid = document.getElementById('deck-grid');
      const deckList = document.getElementById('deck-list');
      const emptyState = document.getElementById('empty-state');
      
      if (!deckGrid || !deckList) return;
      
      // Clear current order
      deckGrid.innerHTML = '';
      deckList.innerHTML = '';
      
      // Add items in sorted order
      if (filtered.length > 0) {
        filtered.forEach((deck: any) => {
          const gridItem = allGridItems.find(item => 
            item.getAttribute('data-title') === deck.data.title.toLowerCase()
          );
          const listItem = allListItems.find(item => 
            item.getAttribute('data-title') === deck.data.title.toLowerCase()
          );
          
          if (gridItem) {
            deckGrid.appendChild(gridItem);
            (gridItem as HTMLElement).style.display = 'block';
          }
          if (listItem) {
            deckList.appendChild(listItem);
            (listItem as HTMLElement).style.display = 'block';
          }
        });
        
        emptyState?.classList.add('hidden');
      } else {
        emptyState?.classList.remove('hidden');
      }
    });
  </script>
</BaseLayout>
