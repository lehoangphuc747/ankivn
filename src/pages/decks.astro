---
import BaseLayout from '@/layouts/BaseLayout.astro';
import DeckFilters from '@/components/decks/DeckFilters.jsx';
import DeckCard from '@/components/decks/DeckCard.astro';
import { getCollection } from 'astro:content';

const decks = await getCollection('decks');

// Function to fetch view counts from Cloudflare Worker
async function fetchViewCounts(deckSlugs: string[]) {
  const viewCounts: { [key: string]: number } = {};

  try {
    // Fetch view counts for all decks in parallel
    const fetchPromises = deckSlugs.map(async (slug) => {
      try {
        const response = await fetch(`https://view-counter.lphc664.workers.dev/decks/${slug}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });

        if (response.ok) {
          const data = await response.json();
          return { slug, views: data.views || 0 };
        }
        return { slug, views: 0 };
      } catch (error) {
        console.error(`Error fetching view count for ${slug}:`, error);
        return { slug, views: 0 };
      }
    });

    const results = await Promise.all(fetchPromises);

    // Convert results to object
    results.forEach(({ slug, views }) => {
      viewCounts[slug] = views;
    });
  } catch (error) {
    console.error('Error fetching view counts:', error);
  }

  return viewCounts;
}

// Get view counts for all decks
const deckSlugs = decks.map(d => d.slug);
const viewCounts = await fetchViewCounts(deckSlugs);

// Attach view counts to deck objects
const decksWithViews = decks.map(deck => ({
  ...deck,
  viewCount: viewCounts[deck.slug] || 0
}));
---
<BaseLayout title="Bộ thẻ">
  <!-- Hero Header -->
  <section class="hero-section-full">
    <!-- Background decorations -->
    <div class="hero-bg-decorations">
      <div class="hero-radial-overlay"></div>
      <div class="hero-side-blur-right"></div>
      <div class="hero-side-blur-left"></div>
    </div>
    
    <div class="relative w-full">
      <div class="text-center py-16 lg:py-20 px-4 sm:px-6 fade-in-scroll">
        <!-- Icon badge -->
        <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-3xl mb-6 shadow-2xl transform hover:scale-110 transition-transform duration-500">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
        </div>

        <!-- Title & Description -->
        <div class="mb-8 space-y-4">
          <h1 class="text-4xl sm:text-5xl lg:text-6xl font-black leading-tight">
            <span class="bg-gradient-to-r from-blue-600 via-purple-600 to-emerald-600 bg-clip-text text-transparent animate-gradient bg-300% font-display">
              Bộ thẻ Anki
            </span>
          </h1>
          <div class="w-20 h-1 bg-gradient-to-r from-blue-500 to-emerald-500 mx-auto rounded-full"></div>
        </div>

        <div class="max-w-3xl mx-auto mb-8 fade-in-scroll" style="animation-delay: 300ms;">
          <p class="text-lg lg:text-xl text-gray-700 leading-relaxed mb-4 font-medium">
            Khám phá thư viện deck Anki đa dạng với hàng nghìn bộ thẻ chất lượng cao
          </p>
          <p class="text-base lg:text-lg text-gray-600 leading-relaxed">
            Tìm kiếm và lọc theo chủ đề, ngôn ngữ, cấp độ để tìm deck phù hợp với nhu cầu học tập của bạn
          </p>
        </div>

        <!-- Quick Stats -->
        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 max-w-2xl mx-auto mb-8 fade-in-scroll" style="animation-delay: 600ms;">
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              {decks.length}
            </div>
            <div class="text-sm text-gray-600 font-medium">Deck có sẵn</div>
          </div>
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              {Array.from(new Set(decks.map(d => d.data.category).filter(Boolean))).length}
            </div>
            <div class="text-sm text-gray-600 font-medium">Chủ đề</div>
          </div>
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              99%
            </div>
            <div class="text-sm text-gray-600 font-medium">Miễn phí</div>
          </div>
          <div class="bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-white/40 shadow-lg">
            <div class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              ⚡
            </div>
            <div class="text-sm text-gray-600 font-medium">Tải nhanh</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Decks Content -->
  <section class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Section Heading -->
    <div class="text-center mb-8">
      <h2 class="text-2xl font-bold text-gray-900 mb-4">Danh sách bộ thẻ</h2>
      <p class="text-gray-600">Sử dụng bộ lọc bên dưới để tìm deck phù hợp</p>
    </div>

    <!-- Filters -->
    <div class="bg-white/80 backdrop-blur-sm rounded-3xl p-6 border border-white/20 shadow-xl mb-8 fade-in-scroll">
      <DeckFilters client:load items={decksWithViews} />
    </div>

    <!-- View Toggle - Positioned between filters and content -->
    <div class="flex justify-center mb-8">
      <div class="inline-flex items-center gap-2 bg-white/80 backdrop-blur-sm rounded-2xl p-2 border border-white/40 shadow-lg">
        <button id="grid-view-btn" class="flex items-center gap-2 px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 active">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
          </svg>
          Lưới
        </button>
        <button id="list-view-btn" class="flex items-center gap-2 px-4 py-2 rounded-xl text-sm font-medium text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
          </svg>
          Danh sách
        </button>
      </div>
    </div>

    <!-- Decks Grid View -->
    <div id="deck-grid" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 fade-in-scroll" style="animation-delay: 300ms;">
      {decks.map((d) => (
        <div data-deck-item 
             data-slug={d.slug}
             data-title={d.data.title.toLowerCase()} 
             data-category={d.data.category || ''} 
             data-subcategory={d.data.subCategory || ''} 
             data-tags={(d.data.tags || []).map(t => t.toLowerCase()).join(',')}
             data-type={d.data.type || 'CHIA SẺ'}
             data-date={d.data.date || ''}>
          <DeckCard
            title={d.data.title}
            cover={d.data.cover}
            date={d.data.date}
            category={d.data.category}
            subCategory={d.data.subCategory}
            type={d.data.type}
            href={`/decks/${d.slug}`}
            viewCount={viewCounts[d.slug] || 0}
          />
        </div>
      ))}
    </div>

    <!-- Decks List View -->
    <div id="deck-list" class="hidden space-y-4 fade-in-scroll" style="animation-delay: 300ms;">
      {decks.map((d) => (
        <div data-deck-item 
             data-slug={d.slug}
             data-title={d.data.title.toLowerCase()} 
             data-category={d.data.category || ''} 
             data-subcategory={d.data.subCategory || ''} 
             data-tags={(d.data.tags || []).map(t => t.toLowerCase()).join(',')}
             data-type={d.data.type || 'CHIA SẺ'}
             data-date={d.data.date || ''}>
          <DeckCard
            title={d.data.title}
            cover={d.data.cover}
            date={d.data.date}
            category={d.data.category}
            subCategory={d.data.subCategory}
            type={d.data.type}
            href={`/decks/${d.slug}`}
            view="list"
            viewCount={viewCounts[d.slug] || 0}
          />
        </div>
      ))}
    </div>

    <!-- Empty State -->
    <div id="empty-state" class="hidden text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      <h3 class="text-lg font-medium text-gray-900 mb-2">Không tìm thấy deck nào</h3>
      <p class="text-gray-500 mb-4">Thử thay đổi bộ lọc hoặc từ khóa tìm kiếm.</p>
    </div>
  </section>

  <script define:vars={{ allDecks: decks }}>
    // View toggle functionality
    let allGridItems = [];
    let allListItems = [];
    let currentView = 'grid';
    let currentFilterState = { filtered: [], query: '' };
    
    // Initialize items immediately
    function initializeItems() {
      allGridItems = Array.from(document.getElementById('deck-grid')?.querySelectorAll('[data-deck-item]') || []);
      allListItems = Array.from(document.getElementById('deck-list')?.querySelectorAll('[data-deck-item]') || []);
    }
    
    // Function to apply current filter to current view
    function applyCurrentFilter() {
      const { filtered, query } = currentFilterState;
      const deckGrid = document.getElementById('deck-grid');
      const deckList = document.getElementById('deck-list');
      const emptyState = document.getElementById('empty-state');

      if (!deckGrid || !deckList || !emptyState) return;

      // 1. Lấy container và danh sách master (gốc) chính xác
      const currentContainer = currentView === 'grid' ? deckGrid : deckList;
      const masterItems = currentView === 'grid' ? allGridItems : allListItems;

      console.log(`Applying filter to ${currentView} view:`, masterItems.length, 'items,', filtered.length, 'filtered');

      // 2. Tạo Map để tra cứu item gốc (lấy từ danh sách master)
      const itemMap = new Map();
      masterItems.forEach(item => {
        const slug = item.getAttribute('data-slug');
        itemMap.set(slug, item);
      });

      // 3. LUÔN LUÔN dọn dẹp container trước
      currentContainer.innerHTML = '';

      // 4. Kiểm tra kết quả và vẽ lại DOM
      if (filtered.length > 0) {
        // Có kết quả: Vẽ lại các deck đã lọc
        filtered.forEach(deck => {
          const item = itemMap.get(deck.slug);
          if (item) {
            // Phải cloneNode(true) để lấy bản sao mới từ danh sách gốc
            currentContainer.appendChild(item.cloneNode(true));
          }
        });
        
        // Ẩn thông báo rỗng
        emptyState.classList.add('hidden');
      } else {
        // Không có kết quả: Hiển thị thông báo rỗng
        emptyState.classList.remove('hidden');
      }
    }
    
    // Listen for filter events from DeckFilters component (set up immediately)
    window.addEventListener('deckFiltersChanged', (event) => {
      console.log('deckFiltersChanged event received:', event.detail);

      // DO NOT initialize items here. The master list is already set.
      // initializeItems(); // <--- REMOVED: Don't reinitialize on every filter change

      // Store current filter state
      currentFilterState = event.detail;

      // Apply the filter to current view
      applyCurrentFilter();
    });
    
    document.addEventListener('DOMContentLoaded', () => {
      initializeItems();
      
      const gridViewBtn = document.getElementById('grid-view-btn');
      const listViewBtn = document.getElementById('list-view-btn');
      const deckGrid = document.getElementById('deck-grid');
      const deckList = document.getElementById('deck-list');

      function switchToGridView() {
        currentView = 'grid';
        gridViewBtn?.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
        gridViewBtn?.classList.remove('text-gray-600');
        listViewBtn?.classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        listViewBtn?.classList.add('text-gray-600');
        
        deckGrid?.classList.remove('hidden');
        deckList?.classList.add('hidden');
        
        // Reapply current filter to the new view
        applyCurrentFilter();
      }

      function switchToListView() {
        currentView = 'list';
        listViewBtn?.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
        listViewBtn?.classList.remove('text-gray-600');
        gridViewBtn?.classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        gridViewBtn?.classList.add('text-gray-600');
        
        deckList?.classList.remove('hidden');
        deckGrid?.classList.add('hidden');
        
        // Reapply current filter to the new view
        applyCurrentFilter();
      }

      gridViewBtn?.addEventListener('click', switchToGridView);
      listViewBtn?.addEventListener('click', switchToListView);

      // Start with grid view active
      switchToGridView();
    });

    // Function to highlight matching text
    function highlightText(text, highlights, searchQuery) {
      if (!searchQuery || !searchQuery.trim()) return text;

      let highlightedText = text;
      const queryWords = searchQuery.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').split(/\s+/).filter(word => word.length > 0);

      // Filter out very short words
      const filteredQueryWords = queryWords.filter(word => word.length > 2 || /^\d+$/.test(word) || /[^\w\s]/.test(word));

      // Process each query word
      for (const queryWord of filteredQueryWords) {
        const regex = new RegExp(`(${escapeRegExp(queryWord)})`, 'gi');

        // Find all matches in the original text
        const matches = [];
        let match;
        while ((match = regex.exec(highlightedText.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, ''))) !== null) {
          matches.push({
            start: match.index,
            end: match.index + match[0].length,
            length: match[0].length
          });
        }

        // Apply highlights (work backwards to maintain indices)
        matches.reverse().forEach(({ start, end }) => {
          const before = highlightedText.substring(0, start);
          const matchText = highlightedText.substring(start, end);
          const after = highlightedText.substring(end);
          highlightedText = `${before}<mark class="bg-yellow-200 px-0.5 rounded">${matchText}</mark>${after}`;
        });
      }

      return highlightedText;
    }

    // Helper function to escape regex special characters
    function escapeRegExp(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
  </script>
</BaseLayout>
